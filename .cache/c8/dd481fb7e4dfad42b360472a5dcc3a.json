{"id":"../node_modules/zrender/lib/contain/polygon.js","dependencies":[{"name":"E:\\myProjects\\大屏空demo\\vueDemo\\package.json","includedInParent":true,"mtime":1589276068111},{"name":"E:\\myProjects\\大屏空demo\\vueDemo\\.browserslistrc","includedInParent":true,"mtime":1568098705750},{"name":"E:\\myProjects\\大屏空demo\\vueDemo\\node_modules\\zrender\\package.json","includedInParent":true,"mtime":1583149628954},{"name":"./windingLine","loc":{"line":1,"column":26},"parent":"E:\\myProjects\\大屏空demo\\vueDemo\\node_modules\\zrender\\lib\\contain\\polygon.js","resolved":"E:\\myProjects\\大屏空demo\\vueDemo\\node_modules\\zrender\\lib\\contain\\windingLine.js"}],"generated":{"js":"var windingLine = require(\"./windingLine\");\n\nvar EPSILON = 1e-8;\n\nfunction isAroundEqual(a, b) {\n  return Math.abs(a - b) < EPSILON;\n}\n\nfunction contain(points, x, y) {\n  var w = 0;\n  var p = points[0];\n\n  if (!p) {\n    return false;\n  }\n\n  for (var i = 1; i < points.length; i++) {\n    var p2 = points[i];\n    w += windingLine(p[0], p[1], p2[0], p2[1], x, y);\n    p = p2;\n  } // Close polygon\n\n\n  var p0 = points[0];\n\n  if (!isAroundEqual(p[0], p0[0]) || !isAroundEqual(p[1], p0[1])) {\n    w += windingLine(p[0], p[1], p0[0], p0[1], x, y);\n  }\n\n  return w !== 0;\n}\n\nexports.contain = contain;"},"sourceMaps":{"js":{"mappings":[{"source":"../node_modules/zrender/lib/contain/polygon.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"../node_modules/zrender/lib/contain/polygon.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"../node_modules/zrender/lib/contain/polygon.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"../node_modules/zrender/lib/contain/polygon.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"../node_modules/zrender/lib/contain/polygon.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"../node_modules/zrender/lib/contain/polygon.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"../node_modules/zrender/lib/contain/polygon.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"../node_modules/zrender/lib/contain/polygon.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"../node_modules/zrender/lib/contain/polygon.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"../node_modules/zrender/lib/contain/polygon.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}},{"source":"../node_modules/zrender/lib/contain/polygon.js","original":{"line":11,"column":0},"generated":{"line":11,"column":0}},{"source":"../node_modules/zrender/lib/contain/polygon.js","original":{"line":12,"column":0},"generated":{"line":12,"column":0}},{"source":"../node_modules/zrender/lib/contain/polygon.js","original":{"line":13,"column":0},"generated":{"line":13,"column":0}},{"source":"../node_modules/zrender/lib/contain/polygon.js","original":{"line":14,"column":0},"generated":{"line":14,"column":0}},{"source":"../node_modules/zrender/lib/contain/polygon.js","original":{"line":15,"column":0},"generated":{"line":15,"column":0}},{"source":"../node_modules/zrender/lib/contain/polygon.js","original":{"line":16,"column":0},"generated":{"line":16,"column":0}},{"source":"../node_modules/zrender/lib/contain/polygon.js","original":{"line":17,"column":0},"generated":{"line":17,"column":0}},{"source":"../node_modules/zrender/lib/contain/polygon.js","original":{"line":18,"column":0},"generated":{"line":18,"column":0}},{"source":"../node_modules/zrender/lib/contain/polygon.js","original":{"line":19,"column":0},"generated":{"line":19,"column":0}},{"source":"../node_modules/zrender/lib/contain/polygon.js","original":{"line":20,"column":0},"generated":{"line":20,"column":0}},{"source":"../node_modules/zrender/lib/contain/polygon.js","original":{"line":21,"column":0},"generated":{"line":21,"column":0}},{"source":"../node_modules/zrender/lib/contain/polygon.js","original":{"line":22,"column":0},"generated":{"line":22,"column":0}},{"source":"../node_modules/zrender/lib/contain/polygon.js","original":{"line":23,"column":0},"generated":{"line":23,"column":0}},{"source":"../node_modules/zrender/lib/contain/polygon.js","original":{"line":24,"column":0},"generated":{"line":24,"column":0}},{"source":"../node_modules/zrender/lib/contain/polygon.js","original":{"line":25,"column":0},"generated":{"line":25,"column":0}},{"source":"../node_modules/zrender/lib/contain/polygon.js","original":{"line":26,"column":0},"generated":{"line":26,"column":0}},{"source":"../node_modules/zrender/lib/contain/polygon.js","original":{"line":27,"column":0},"generated":{"line":27,"column":0}},{"source":"../node_modules/zrender/lib/contain/polygon.js","original":{"line":28,"column":0},"generated":{"line":28,"column":0}},{"source":"../node_modules/zrender/lib/contain/polygon.js","original":{"line":29,"column":0},"generated":{"line":29,"column":0}},{"source":"../node_modules/zrender/lib/contain/polygon.js","original":{"line":30,"column":0},"generated":{"line":30,"column":0}},{"source":"../node_modules/zrender/lib/contain/polygon.js","original":{"line":31,"column":0},"generated":{"line":31,"column":0}},{"source":"../node_modules/zrender/lib/contain/polygon.js","original":{"line":32,"column":0},"generated":{"line":32,"column":0}},{"source":"../node_modules/zrender/lib/contain/polygon.js","original":{"line":33,"column":0},"generated":{"line":33,"column":0}}],"sources":{"../node_modules/zrender/lib/contain/polygon.js":"var windingLine = require(\"./windingLine\");\n\nvar EPSILON = 1e-8;\n\nfunction isAroundEqual(a, b) {\n  return Math.abs(a - b) < EPSILON;\n}\n\nfunction contain(points, x, y) {\n  var w = 0;\n  var p = points[0];\n\n  if (!p) {\n    return false;\n  }\n\n  for (var i = 1; i < points.length; i++) {\n    var p2 = points[i];\n    w += windingLine(p[0], p[1], p2[0], p2[1], x, y);\n    p = p2;\n  } // Close polygon\n\n\n  var p0 = points[0];\n\n  if (!isAroundEqual(p[0], p0[0]) || !isAroundEqual(p[1], p0[1])) {\n    w += windingLine(p[0], p[1], p0[0], p0[1], x, y);\n  }\n\n  return w !== 0;\n}\n\nexports.contain = contain;"},"lineCount":33}},"error":null,"hash":"b0d040254a1e86e5d6b0634286f949d4","cacheData":{"env":{}}}